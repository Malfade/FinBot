import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.types.reply_keyboard_remove import ReplyKeyboardRemove
import aiosqlite

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
# Load Bot Token from environment variable (recommended)
API_TOKEN = os.getenv('API_TOKEN', '–≤–∞—à_—Ä–µ–∑–µ—Ä–≤–Ω—ã–π_—Ç–æ–∫–µ–Ω')

# Initialize bot and Dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# Database connection (asynchronous with aiosqlite)
class Database:
    def __init__(self, db_name='finance.db'):
        self.db_name = db_name
        self.conn = None
        self.cursor = None

    async def connect(self):
        self.conn = await aiosqlite.connect(self.db_name)
        self.cursor = await self.conn.cursor()
        await self.create_tables()

    async def create_tables(self):
        await self.cursor.execute(""" 
            CREATE TABLE IF NOT EXISTS transactions ( 
                id INTEGER PRIMARY KEY AUTOINCREMENT, 
                user_id INTEGER, 
                type TEXT, 
                amount REAL, 
                category TEXT, 
                date TEXT 
            ) 
        """)
        await self.conn.commit()

    async def add_transaction(self, user_id, transaction_type, amount, category):
        try:
            await self.cursor.execute(
                "INSERT INTO transactions (user_id, type, amount, category, date) VALUES (?, ?, ?, ?, ?)", 
                (user_id, transaction_type, amount, category, datetime.now().strftime('%Y-%m-%d'))
            )
            await self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"Database error: {e}")
            return False

    async def get_balance(self, user_id):
        await self.cursor.execute("SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = 'income'", (user_id,))
        total_income = await self.cursor.fetchone()  # –∑–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º await
        total_income = total_income[0] if total_income else 0  # –µ—Å–ª–∏ fetchone –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0

        await self.cursor.execute("SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = 'expense'", (user_id,))
        total_expense = await self.cursor.fetchone()  # –∑–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º await
        total_expense = total_expense[0] if total_expense else 0  # –µ—Å–ª–∏ fetchone –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0

        return total_income, total_expense

    async def get_monthly_stats(self, user_id):
        current_month = datetime.now().strftime('%Y-%m')
        await self.cursor.execute("""
            SELECT category, SUM(amount) as total 
            FROM transactions 
            WHERE user_id = ? AND type = 'expense' 
            AND strftime('%Y-%m', date) = ? 
            GROUP BY category 
            ORDER BY total DESC
        """, (user_id, current_month))
        
        return await self.cursor.fetchall()

    async def close(self):
        await self.conn.close()


# State machine for handling transaction input
class TransactionStates(StatesGroup):
    waiting_for_transaction = State()
    transaction_type = State()
    category = State()
    amount = State()

# Initialize database
db = Database()

# Keyboard setup
def create_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"),
                KeyboardButton(text="üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
            ],
            [
                KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"),
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ]
        ],
        resize_keyboard=True
    )
    return keyboard

# Category selection keyboard
def create_category_keyboard(categories):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=category)] for category in categories],
        resize_keyboard=True
    )

# Start command handler
@dp.message(F.text == "/start")
async def start_command(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. \n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:\n"
        "üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n"
        "üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n"
        "üí∞ –ë–∞–ª–∞–Ω—Å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü",
        reply_markup=create_keyboard()
    )


# Income handler
@dp.message(F.text == "üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def add_income(message: Message, state: FSMContext):
    await state.set_state(TransactionStates.waiting_for_transaction)
    await state.update_data(transaction_type="income")
    categories = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–æ–¥–∞—Ä–æ–∫", "–ü—Ä–æ—á–µ–µ"]
    await message.answer("üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞", reply_markup=create_category_keyboard(categories))

# Expense handler
@dp.message(F.text == "üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense(message: Message, state: FSMContext):
    await state.set_state(TransactionStates.waiting_for_transaction)
    await state.update_data(transaction_type="expense")
    categories = ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü—Ä–æ—á–µ–µ"]
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞", reply_markup=create_category_keyboard(categories))

# Category selection handler
@dp.message(TransactionStates.waiting_for_transaction)
async def select_category(message: Message, state: FSMContext):
    selected_category = message.text.strip()
    
    # Validate selected category
    state_data = await state.get_data()
    if state_data.get('transaction_type') == 'income':
        categories = ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–æ–¥–∞—Ä–æ–∫", "–ü—Ä–æ—á–µ–µ"]
    else:
        categories = ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü—Ä–æ—á–µ–µ"]
        
    if selected_category not in categories:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    
    # Save the category and ask for amount
    await state.update_data(category=selected_category)
    await state.set_state(TransactionStates.amount)
    
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000)")

# Process amount input
@dp.message(TransactionStates.amount)
async def process_amount(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = message.text.strip()
    
    try:
        amount = float(data)
        
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return
        
        # Get transaction type and category from state data
        state_data = await state.get_data()
        transaction_type = state_data.get('transaction_type')
        category = state_data.get('category')
        
        # Add transaction to database
        if await db.add_transaction(user_id, transaction_type, amount, category):
            await message.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=create_keyboard())
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        # Reset state and return to main menu
        await state.clear()
        await message.answer("üìù –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:", reply_markup=create_keyboard())
    
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# Balance handler
@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def get_balance(message: Message):
    total_income, total_expense = await db.get_balance(message.from_user.id)
    balance = total_income - total_expense
    
    await message.answer(
        f"üí∞ –í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:\n"
        f"–î–æ—Ö–æ–¥—ã: {total_income:.2f} —Ä—É–±.\n"
        f"–†–∞—Å—Ö–æ–¥—ã: {total_expense:.2f} —Ä—É–±.\n"
        f"–ò—Ç–æ–≥–æ: {balance:.2f} —Ä—É–±."
    )

# Monthly statistics handler
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def get_statistics(message: Message):
    stats = await db.get_monthly_stats(message.from_user.id)
    
    if not stats:
        await message.answer("üìä –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü:\n"
    for category, total in stats:
        response += f"{category}: {total:.2f} —Ä—É–±.\n"
    
    await message.answer(response)

# Prevent unknown messages from breaking the flow
@dp.message()
async def handle_unknown(message: Message):
    await message.answer("‚ùì –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# Main polling loop
async def main():
    try:
        await db.connect()
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot initialization error: {e}")
    finally:
        await bot.session.close()
        await db.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
