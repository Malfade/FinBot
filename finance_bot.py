import os
import logging
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, FSInputFile, BufferedInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiosqlite
import matplotlib.pyplot as plt
import io
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
API_TOKEN = os.getenv('API_TOKEN', '–≤–∞—à_—Ä–µ–∑–µ—Ä–≤–Ω—ã–π_—Ç–æ–∫–µ–Ω')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
async def generate_pie_chart(data: list[tuple], title: str) -> io.BytesIO:
    categories = [item[0] for item in data]
    amounts = [item[1] for item in data]
    
    plt.figure(figsize=(8, 6))
    plt.pie(amounts, labels=categories, autopct='%1.1f%%', startangle=90)
    plt.title(title)
    plt.axis('equal')
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100)
    buf.seek(0)
    plt.close()
    return buf

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
class Database:
    def __init__(self, db_name='finance.db'):
        self.db_name = db_name
        self.conn = None
        self.cursor = None

    async def connect(self):
        self.conn = await aiosqlite.connect(self.db_name)
        self.cursor = await self.conn.cursor()
        await self.create_tables()

    async def create_tables(self):
        await self.cursor.execute("""CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT,
            amount REAL,
            category TEXT,
            date TEXT
        )""")
        await self.cursor.execute("""CREATE TABLE IF NOT EXISTS user_categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            category_name TEXT,
            transaction_type TEXT
        )""")
        await self.conn.commit()

    async def add_transaction(self, user_id, transaction_type, amount, category):
        try:
            await self.cursor.execute(
                "INSERT INTO transactions (user_id, type, amount, category, date) VALUES (?, ?, ?, ?, ?)", 
                (user_id, transaction_type, amount, category, datetime.now().strftime('%Y-%m-%d'))
            )
            await self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
            return False
    
    async def add_user_category(self, user_id, category_name, transaction_type):
        try:
            await self.cursor.execute(
                "INSERT INTO user_categories VALUES (NULL, ?, ?, ?)",
                (user_id, category_name, transaction_type))
            await self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return False

    async def get_user_categories(self, user_id, transaction_type):
        await self.cursor.execute(
            "SELECT category_name FROM user_categories WHERE user_id = ? AND transaction_type = ?",
            (user_id, transaction_type))
        return [row[0] for row in await self.cursor.fetchall()]

    async def get_balance(self, user_id):
        await self.cursor.execute(
            "SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = 'income'", (user_id,))
        income = (await self.cursor.fetchone())[0] or 0
        
        await self.cursor.execute(
            "SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = 'expense'", (user_id,))
        expense = (await self.cursor.fetchone())[0] or 0
        
        return income, expense

    async def get_monthly_stats(self, user_id, transaction_type=None):
        current_month = datetime.now().strftime('%Y-%m')
        
        if transaction_type:
            query = """
                SELECT category, SUM(amount) FROM transactions
                WHERE user_id = ? AND type = ? AND strftime('%Y-%m', date) = ?
                GROUP BY category
                ORDER BY SUM(amount) DESC
            """
            params = (user_id, transaction_type, current_month)
        else:
            query = """
                SELECT category, SUM(amount) FROM transactions
                WHERE user_id = ? AND strftime('%Y-%m', date) = ?
                GROUP BY category
                ORDER BY SUM(amount) DESC
            """
            params = (user_id, current_month)
        
        await self.cursor.execute(query, params)
        return await self.cursor.fetchall()

    async def close(self):
        await self.conn.close()

# --- States ---
class TransactionStates(StatesGroup):
    waiting_for_transaction = State()
    transaction_type = State()
    category = State()
    amount = State()
    adding_new_category = State()

db = Database()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def create_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), KeyboardButton(text="üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
        ],
        resize_keyboard=True
    )

def create_category_keyboard(categories):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=cat)] for cat in categories],
        resize_keyboard=True
    )

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–º:",
        reply_markup=create_keyboard()
    )

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def manage_categories(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìà –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤")],
                [KeyboardButton(text="üìâ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "üìà –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤")
async def add_income_category(message: Message, state: FSMContext):
    await state.set_state(TransactionStates.adding_new_category)
    await state.update_data(transaction_type="income")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "üìâ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")
async def add_expense_category(message: Message, state: FSMContext):
    await state.set_state(TransactionStates.adding_new_category)
    await state.update_data(transaction_type="expense")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardRemove())

@dp.message(TransactionStates.adding_new_category)
async def save_category(message: Message, state: FSMContext):
    data = await state.get_data()
    if await db.add_user_category(
        user_id=message.from_user.id,
        category_name=message.text,
        transaction_type=data["transaction_type"]
    ):
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=create_keyboard())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message(F.text == "üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def add_income(message: Message, state: FSMContext):
    await state.set_state(TransactionStates.waiting_for_transaction)
    await state.update_data(transaction_type="income")
    categories = await db.get_user_categories(message.from_user.id, "income")
    categories = categories + ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–æ–¥–∞—Ä–æ–∫", "–ü—Ä–æ—á–µ–µ"]  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=create_category_keyboard(categories))

@dp.message(F.text == "üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense(message: Message, state: FSMContext):
    await state.set_state(TransactionStates.waiting_for_transaction)
    await state.update_data(transaction_type="expense")
    categories = await db.get_user_categories(message.from_user.id, "expense")
    categories = categories + ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü—Ä–æ—á–µ–µ"]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=create_category_keyboard(categories))

@dp.message(TransactionStates.waiting_for_transaction)
async def select_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(TransactionStates.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=ReplyKeyboardRemove())

@dp.message(TransactionStates.amount)
async def save_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    
    data = await state.get_data()
    if await db.add_transaction(
        user_id=message.from_user.id,
        transaction_type=data["transaction_type"],
        amount=amount,
        category=data["category"]
    ):
        await message.answer("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=create_keyboard())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
    await state.clear()

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    income, expense = await db.get_balance(message.from_user.id)
    balance = income - expense
    await message.answer(
        f"üíµ –î–æ—Ö–æ–¥—ã: {income:.2f} —Ä—É–±\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expense:.2f} —Ä—É–±\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±"
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    income, expense = await db.get_balance(message.from_user.id)
    balance = income - expense
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    income_stats = await db.get_monthly_stats(message.from_user.id, "income")
    expense_stats = await db.get_monthly_stats(message.from_user.id, "expense")
    
    # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text = (
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±\n"
        f"üíµ –î–æ—Ö–æ–¥—ã: {income:.2f} —Ä—É–±\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expense:.2f} —Ä—É–±\n\n"
    )
    
    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫–∏
    try:
        # –°–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤
        if income_stats:
            income_categories = [item[0] for item in income_stats]
            income_amounts = [item[1] for item in income_stats]
            ax1.pie(income_amounts, labels=income_categories, autopct='%1.1f%%', startangle=90)
            ax1.set_title('–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
        else:
            ax1.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö', ha='center', va='center')
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if expense_stats:
            expense_categories = [item[0] for item in expense_stats]
            expense_amounts = [item[1] for item in expense_stats]
            ax2.pie(expense_amounts, labels=expense_categories, autopct='%1.1f%%', startangle=90)
            ax2.set_title('–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
        else:
            ax2.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö', ha='center', va='center')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=100)
        buf.seek(0)
        plt.close()
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp:
            tmp.write(buf.getvalue())
            tmp_path = tmp.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        photo = FSInputFile(tmp_path)
        await message.answer_photo(photo, caption=text)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_path)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        await message.answer(text + "\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏.")

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_keyboard())

@dp.message()
async def unknown_command(message: Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=create_keyboard())

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await db.connect()
    await dp.start_polling(bot)
    await db.close()

if __name__ == "__main__":
    asyncio.run(main())