import os
import sqlite3
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load Bot Token from environment variable (recommended)
API_TOKEN = os.getenv('@Finhps_bot', '7565373869:AAGi-pip0HX5mDNSE5427PR3Q5OhQYwLnz8')

# Initialize bot and storage
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Database connection
class Database:
    def __init__(self, db_name='finance.db'):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount REAL,
                category TEXT,
                date TEXT
            )
        """)
        self.conn.commit()

    def add_transaction(self, user_id, transaction_type, amount, category):
        try:
            self.cursor.execute(
                "INSERT INTO transactions (user_id, type, amount, category, date) VALUES (?, ?, ?, ?, ?)", 
                (user_id, transaction_type, amount, category, datetime.now().strftime('%Y-%m-%d'))
            )
            self.conn.commit()
            return True
        except Exception as e:
            logger.error(f"Database error: {e}")
            return False

    def get_balance(self, user_id):
        self.cursor.execute("SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = 'income'", (user_id,))
        total_income = self.cursor.fetchone()[0] or 0
        
        self.cursor.execute("SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = 'expense'", (user_id,))
        total_expense = self.cursor.fetchone()[0] or 0
        
        return total_income, total_expense

    def get_monthly_stats(self, user_id):
        current_month = datetime.now().strftime('%Y-%m')
        self.cursor.execute("""
            SELECT category, SUM(amount) as total 
            FROM transactions 
            WHERE user_id = ? AND type = 'expense' 
            AND strftime('%Y-%m', date) = ?
            GROUP BY category 
            ORDER BY total DESC
        """, (user_id, current_month))
        
        return self.cursor.fetchall()

    def close(self):
        self.conn.close()

# State machine for handling transaction input
class TransactionStates(StatesGroup):
    waiting_for_transaction = State()

# Initialize database
db = Database()

# Keyboard setup
def create_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), 
        KeyboardButton("üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
    )
    keyboard.add(
        KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), 
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    return keyboard

# Start command handler
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. \n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:\n"
        "üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n"
        "üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏\n"
        "üí∞ –ë–∞–ª–∞–Ω—Å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü",
        reply_markup=create_keyboard()
    )

# Income handler
@dp.message_handler(lambda message: message.text == "üìà –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def add_income(message: types.Message):
    await message.answer("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000 –∑–∞—Ä–ø–ª–∞—Ç–∞)")
    await TransactionStates.waiting_for_transaction.set()

# Expense handler
@dp.message_handler(lambda message: message.text == "üìâ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense(message: types.Message):
    await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –µ–¥–∞)")
    await TransactionStates.waiting_for_transaction.set()

# Balance handler
@dp.message_handler(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def get_balance(message: types.Message):
    total_income, total_expense = db.get_balance(message.from_user.id)
    balance = total_income - total_expense
    
    await message.answer(
        f"üí∞ –í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:\n"
        f"–î–æ—Ö–æ–¥—ã: {total_income:.2f} —Ä—É–±.\n"
        f"–†–∞—Å—Ö–æ–¥—ã: {total_expense:.2f} —Ä—É–±.\n"
        f"–ò—Ç–æ–≥–æ: {balance:.2f} —Ä—É–±."
    )

# Monthly statistics handler
@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def get_statistics(message: types.Message):
    stats = db.get_monthly_stats(message.from_user.id)
    
    if not stats:
        await message.answer("üìä –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü:\n"
    for category, total in stats:
        response += f"{category}: {total:.2f} —Ä—É–±.\n"
    
    await message.answer(response)

# Transaction processing
@dp.message_handler(state=TransactionStates.waiting_for_transaction)
async def process_transaction(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = message.text.split(" ", 1)
    
    try:
        # Validate input
        if len(data) < 2:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
        
        amount = float(data[0])
        category = data[1].strip()
        
        # Prevent negative amounts
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return
        
        # Determine transaction type based on previous message
        transaction_type = "income" if "üìà" in (await state.get_data()).get('last_button', '') else "expense"
        
        # Add transaction to database
        if db.add_transaction(user_id, transaction_type, amount, category):
            await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        # Reset state
        await state.finish()
    
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# Prevent unknown messages from breaking the flow
@dp.message_handler()
async def handle_unknown(message: types.Message):
    await message.answer("‚ùì –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

def main():
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.error(f"Bot initialization error: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    main()